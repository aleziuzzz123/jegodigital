# PRODUCTION FIRESTORE RULES
# Use these rules after confirming the temporary rules work
# These rules require proper custom claims to be set

rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    function isIn() { return request.auth != null; }
    function isAdmin()  { return isIn() && request.auth.token.role == 'admin'; }
    function isClient() { return isIn() && request.auth.token.role == 'client'; }

    // Public catalog needed by client dashboard
    match /products/{id} {
      allow read: if isClient() || isAdmin();
      allow write: if isAdmin();
    }
    match /bundles/{id} {
      allow read: if isClient() || isAdmin();
      allow write: if isAdmin();
    }

    // Client-owned data
    match /clients/{uid} {
      allow read, write: if isAdmin() || (isClient() && request.auth.uid == uid);
    }
    match /projects/{projId} {
      allow read, write: if isAdmin()
        || (isClient() && resource.data.clientId == request.auth.uid);
    }

    // Admin-only
    match /team/{id} { allow read, write: if isAdmin(); }

    // Default deny
    match /{document=**} { allow read, write: if false; }
  }
}

# TO SET CUSTOM CLAIMS (run this in your backend):
# await auth.setCustomUserClaims(uid, { role: 'client' });
# await auth.setCustomUserClaims(uid, { role: 'admin' });

# TO REFRESH TOKEN ON CLIENT (after setting claims):
# await auth.currentUser?.getIdToken(true);
